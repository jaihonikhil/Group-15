<Table 1>
 <caption text="

   Matrix types in
   
    Dune-ISTL
   
   , the first three matrix types cannot be used as a block matrices.
  
">
 </caption>
 <row row="0">
  <cell col="0" row="0" text="Class">
  </cell>
  <cell col="1" row="0" text="Implements">
  </cell>
 </row>
 <row row="1">
  <cell col="0" row="1" text="FieldMatrix">
  </cell>
  <cell col="1" row="1" text="(small) matrix with size known at compile time">
  </cell>
 </row>
 <row row="2">
  <cell col="0" row="2" text="DiagonalMatrix">
  </cell>
  <cell col="1" row="2" text="Storage optimal representation of a diagonal matrix with size known at compile time">
  </cell>
 </row>
 <row row="3">
  <cell col="0" row="3" text="ScaledIdentityMatrix">
  </cell>
  <cell col="1" row="3" text="Storage optimal representation of a scaled identity matrix with size known at compile time">
  </cell>
 </row>
 <row row="4">
  <cell col="0" row="4" text="BCRSMatrix">
  </cell>
  <cell col="1" row="4" text="(block) compressed row storage matrix">
  </cell>
 </row>
 <row row="5">
  <cell col="0" row="5" text="BDMatrix">
  </cell>
  <cell col="1" row="5" text="(block) diagonal matrix">
  </cell>
 </row>
 <row row="6">
  <cell col="0" row="6" text="BTDMatrix">
  </cell>
  <cell col="1" row="6" text="(block) tri-diagonal matrix">
  </cell>
 </row>
 <row row="7">
  <cell col="0" row="7" text="Matrix">
  </cell>
  <cell col="1" row="7" text="Generic dynamic dense (block) matrix">
  </cell>
 </row>
 <row row="8">
  <cell col="0" row="8" text="MultiTypeBlockMatrix">
  </cell>
  <cell col="1" row="8" text="Dense block matrix with differing block type known at compile time">
  </cell>
 </row>
 <statements>
  <statement id="0" text="There are eight types of matrix given in the table." type="">
  </statement>
  <statement id="1" text="BDMatrix and BTDMatrix are diagonal matrix." type="">
  </statement>
  <statement id="3" text="Every matrix has same implements." type="">
  </statement>
  <statement id="5" text="BDMatrix and BTDMatrix are not diagonal matrix." type="">
  </statement>
 </statements>
</Table 1>
<Table 4>
 <caption text="

   Iterative and direct solvers in
   
    Dune-ISTL
   
   . Some of these solvers can handle non-static preconditioner, i.e. the preconditioner might change from iteration to iteration.
  
">
 </caption>
 <row row="0">
  <cell col="0" row="0" text="Class">
  </cell>
  <cell col="1" row="0" text="Implements">
  </cell>
  <cell col="2" row="0" text="Direct">
  </cell>
 </row>
 <row row="1">
  <cell col="0" row="1" text="LoopSolver">
  </cell>
  <cell col="1" row="1" text="Simply applies preconditioner in each step">
  </cell>
  <cell col="2" row="1" text="No">
  </cell>
 </row>
 <row row="2">
  <cell col="0" row="2" text="GradientSolver">
  </cell>
  <cell col="1" row="2" text="Simple gradient solver">
  </cell>
  <cell col="2" row="2" text="No">
  </cell>
 </row>
 <row row="3">
  <cell col="0" row="3" text="CGSolver">
  </cell>
  <cell col="1" row="3" text="Conjugate gradient method">
  </cell>
  <cell col="2" row="3" text="No">
  </cell>
 </row>
 <row row="4">
  <cell col="0" row="4" text="BiCGSTABSolver">
  </cell>
  <cell col="1" row="4" text="Biconjugate gradient stabilized method">
  </cell>
  <cell col="2" row="4" text="No">
  </cell>
 </row>
 <row row="5">
  <cell col="0" row="5" text="MINRESSolver">
  </cell>
  <cell col="1" row="5" text="Minimal Residual method">
  </cell>
  <cell col="2" row="5" text="No">
  </cell>
 </row>
 <row row="6">
  <cell col="0" row="6" text="RestartedGMResSolver">
  </cell>
  <cell col="1" row="6" text="Restarted GMRes solver">
  </cell>
  <cell col="2" row="6" text="No">
  </cell>
 </row>
 <row row="7">
  <cell col="0" row="7" text="RestartedFlexibleGMResSolver">
  </cell>
  <cell col="1" row="7" text="Flexible restarted GMRes solver (for non-static preconditioners)">
  </cell>
  <cell col="2" row="7" text="No">
  </cell>
 </row>
 <row row="8">
  <cell col="0" row="8" text="GeneralizedPCGSolver">
  </cell>
  <cell col="1" row="8" text="Flexible conjugate gradient solver (for non-static preconditioners)">
  </cell>
  <cell col="2" row="8" text="No">
  </cell>
 </row>
 <row row="9">
  <cell col="0" row="9" text="RestartedFCGSolver">
  </cell>
  <cell col="1" row="9" text="Flexible conjugate gradient solver proposed by Notay (for non-static preconditioners)">
  </cell>
  <cell col="2" row="9" text="No">
  </cell>
 </row>
 <row row="10">
  <cell col="0" row="10" text="CompleteFCGSolver">
  </cell>
  <cell col="1" row="10" text="Flexible conjugate gradient method reusing old orthogonalizations when restarting">
  </cell>
  <cell col="2" row="10" text="No">
  </cell>
 </row>
 <row row="11">
  <cell col="0" row="11" text="SuperLU">
  </cell>
  <cell col="1" row="11" text="Wrapper for SuperLU library">
  </cell>
  <cell col="2" row="11" text="Yes">
  </cell>
 </row>
 <row row="12">
  <cell col="0" row="12" text="UMFPack">
  </cell>
  <cell col="1" row="12" text="Wrapper for UMFPack direct solver library">
  </cell>
  <cell col="2" row="12" text="Yes">
  </cell>
 </row>
 <statements>
  <statement id="0" text="GradientSolver implements is Simple gradient solver." type="">
  </statement>
  <statement id="2" text="BiCGSTABSolver implements is Biconjugate gradient stabilized method." type="">
  </statement>
  <statement id="3" text="MINRESSolver implements is Minimal Residual method." type="">
  </statement>
  <statement id="5" text="GeneralizedPCGSolver implements is Flexible conjugate gradient method reusing old orthogonalizations when restarting ." type="">
  </statement>
  <statement id="6" text="CompleteFCGSolver implements is Biconjugate gradient stabilized method." type="">
  </statement>
  <statement id="7" text="All of the listed preconditioners can be used in the iterative solvers provided by Dune-ISTL ." type="">
  </statement>
  <statement id="8" text="Table 4 contains a list of these together with the direct solvers." type="">
  </statement>
 </statements>
</Table 4>
<Table 3>
 <caption text="

   Preconditioners in
   
    Dune-ISTL
   
   .
  
">
 </caption>
 <row row="0">
  <cell col="0" row="0" text="Class">
  </cell>
  <cell col="1" row="0" text="Implements">
  </cell>
  <cell col="2" row="0" text="s/p">
  </cell>
  <cell col="3" row="0" text="Recursive">
  </cell>
 </row>
 <row row="1">
  <cell col="0" row="1" text="Richardson">
  </cell>
  <cell col="1" row="1" text="Richardson (multiplicate with a scalar)">
  </cell>
  <cell col="2" row="1" text="s">
  </cell>
  <cell col="3" row="1" text="No">
  </cell>
 </row>
 <row row="2">
  <cell col="0" row="2" text="SeqJac">
  </cell>
  <cell col="1" row="2" text="Jacobi method">
  </cell>
  <cell col="2" row="2" text="s">
  </cell>
  <cell col="3" row="2" text="Yes">
  </cell>
 </row>
 <row row="3">
  <cell col="0" row="3" text="SeqSOR">
  </cell>
  <cell col="1" row="3" text="Successive overrelaxation (SOR)">
  </cell>
  <cell col="2" row="3" text="s">
  </cell>
  <cell col="3" row="3" text="Yes">
  </cell>
 </row>
 <row row="4">
  <cell col="0" row="4" text="SeqSSOR">
  </cell>
  <cell col="1" row="4" text="Symmetric SOR">
  </cell>
  <cell col="2" row="4" text="s">
  </cell>
  <cell col="3" row="4" text="Yes">
  </cell>
 </row>
 <row row="5">
  <cell col="0" row="5" text="SeqOverlappingSchwarz">
  </cell>
  <cell col="1" row="5" text="Overlapping Schwarz for arbitrary subdomains">
  </cell>
  <cell col="2" row="5" text="s">
  </cell>
  <cell col="3" row="5" text="No">
  </cell>
 </row>
 <row row="6">
  <cell col="0" row="6" text="SeqILU">
  </cell>
  <cell col="1" row="6" text="Incomplete LU decomposition">
  </cell>
  <cell col="2" row="6" text="s">
  </cell>
  <cell col="3" row="6" text="No">
  </cell>
 </row>
 <row row="7">
  <cell col="0" row="7" text="SeqILDL">
  </cell>
  <cell col="1" row="7" text="Incomplete LDL decomposition">
  </cell>
  <cell col="2" row="7" text="s">
  </cell>
  <cell col="3" row="7" text="No">
  </cell>
 </row>
 <row row="8">
  <cell col="0" row="8" text="Pamg::AMG">
  </cell>
  <cell col="1" row="8" text="Algebraic multigrid solver based on aggregation">
  </cell>
  <cell col="2" row="8" text="s/p">
  </cell>
  <cell col="3" row="8" text="No">
  </cell>
 </row>
 <row row="9">
  <cell col="0" row="9" text="BlockPreconditioner">
  </cell>
  <cell col="1" row="9" text="Wraps sequential preconditioner to parallel hybrid one">
  </cell>
  <cell col="2" row="9" text="p">
  </cell>
  <cell col="3" row="9" text="No">
  </cell>
 </row>
 <statements>
  <statement id="1" text="Richardson Implements is Richardson (multiplicate with a scalar)." type="">
  </statement>
  <statement id="2" text="SeqJac Implements is Jacobi method." type="">
  </statement>
  <statement id="3" text="SeqSOR Implements is Successive overrelaxation (SOR) ." type="">
  </statement>
  <statement id="4" text="SeqSSOR Implements is Symmetric SOR." type="">
  </statement>
  <statement id="5" text="They have 5 different class." type="">
  </statement>
  <statement id="6" text="SeqOverlappingSchwarz implements is Wraps sequential preconditioner to parallel hybrid one." type="">
  </statement>
  <statement id="8" text="Pamg::AMG implements is Incomplete LDL decomposition." type="">
  </statement>
 </statements>
</Table 3>
<Table 2>
 <caption text="

   Vector types in
   
    Dune-ISTL
   
   , the first vector type cannot be used as a block vector.
  
">
 </caption>
 <row row="0">
  <cell col="0" row="0" text="Class">
  </cell>
  <cell col="1" row="0" text="Implements">
  </cell>
 </row>
 <row row="1">
  <cell col="0" row="1" text="FieldVector">
  </cell>
  <cell col="1" row="1" text="(small) vector with size known at compile time">
  </cell>
 </row>
 <row row="2">
  <cell col="0" row="2" text="BVector">
  </cell>
  <cell col="1" row="2" text="(block) vector, blocks have same size">
  </cell>
 </row>
 <row row="3">
  <cell col="0" row="3" text="VariableBlockVector">
  </cell>
  <cell col="1" row="3" text="Block vector where each block may vary in size">
  </cell>
 </row>
 <row row="4">
  <cell col="0" row="4" text="MultiTypeBlockVector">
  </cell>
  <cell col="1" row="4" text="Block vector with differing block type known at compile time">
  </cell>
 </row>
 <statements>
  <statement id="0" text="The class for (small) vector with size known at compile time Implement is FieldVector." type="">
  </statement>
  <statement id="1" text="There are four types of class given." type="">
  </statement>
  <statement id="4" text="The class for (small) vector with size known at compile time Implement is BVector." type="">
  </statement>
  <statement id="5" text="There are fourteen types of class given." type="">
  </statement>
 </statements>
</Table 2>